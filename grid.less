.grid(@gridClass; @cellClass; @columnsNum; @margin) {
	.@{cellClass} {
		.gridColWidth(@columnsNum; @margin);
		margin-left: @margin;
		margin-top: @margin;
		box-sizing: border-box;
		float: left;
	}

	.@{cellClass}:nth-child(@{columnsNum}n + 1) {
		margin-left: 0;
	}

	.@{cellClass}:nth-child(-n + @{columnsNum}) {
		margin-top: 0;
	}
}

.grid(@gridClass; @cellClass; @columnsNum; @margin; @param) {
	// make basic grid
	.grid(@gridClass; @cellClass; @columnsNum; @margin);

	// make adaptive grid
	& when (ispixel(extract(@param, 1))) { // @param is a state
		.gridAdaptive(@param, @gridClass, @cellClass);
	}

	& when not (ispixel(extract(@param, 1))) { // @param is a list of states
		.loop(@i: 1) when (@i =< length(@param)) {
			.gridAdaptive(extract(@param, @i), @gridClass, @cellClass);

			.loop(@i + 1);
		}

		.loop();
	}
}

.gridAdaptive(@state, @gridClass, @cellClass) {
	@screenWidth: extract(@state, 1);
	@columnsNum: extract(@state, 2);
	@margin: extract(@state, 3);

	@media screen and (max-width: @screenWidth) {
		.@{gridClass} .@{cellClass} {
			.gridColWidth(@columnsNum; @margin);
			margin-left: @margin;
			margin-top: @margin;
		}

		.@{cellClass}:nth-child(-n + @{columnsNum}) {
			margin-top: 0;
		}

		& when not (@columnsNum = 1) {
			.@{cellClass}:nth-child(@{columnsNum}n + 1) {
				margin-left: 0;
			}
		}
	}
}

.gridColWidth(@columnsNum; @margin) {
	& when (@columnsNum = 1) {
		width: 100%;
	}

	& when not (@columnsNum = 1) {
		@width: floor((100% / @columnsNum) * 100) / 100;
		@widthDiff: floor((@margin * (@columnsNum - 1) / @columnsNum) * 100) / 100;
		width: ~"calc(@{width} - @{widthDiff})";
	}
}

